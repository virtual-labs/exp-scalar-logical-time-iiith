{
  "version": 2.0,
  "questions": [
    {
      "question": "Scalar logical clocks can be used to ",
      "answers": {
        "a": "Totally order events by themselves",
        "b": "Can only establish Partial Ordering",
        "c": "Can be used along with arbitrary tiebreaks to establish total ordering",
        "d": "Can be used along with arbitrary tiebreaks to establish partial ordering"
      },
      "explanations": {
        "a": "Incorrect. It is possible for two events to have no causal connection to the other.",
        "b": "Incorrect. It is possible for concurrent events to be ordered by another metric to establish total order",
        "c": "Correct. While a total ordering is possible, this does not imply causal relationhip",
        "d": "Incorrect. It is possible to get a partial ordering with just a scalar logical clock"
      },
      "correctAnswer": "c",
      "difficulty": "beginner"
    },
    {
      "question": "When a process sends a message, it ",
      "answers": {
        "a": "increments its clock before the send event and sends a message with the time before the increment",
        "b": "increments its clock after the send event and sends a message with the time after the increment",
        "c": "increments its clock after the send event and sends a message with the time before the increment",
        "d": "increments its clock before the send event and sends a message with the time after the increment"
      },
      "explanations": {
        "a": "Incorrect. Messages are always sent with the current logical time at a process",
        "b": "Incorrect. Logical clocks are incremented before the event and the message carry the current logical time at the process",
        "c": "Incorrect. Logical clocks are incremented before the event",
        "d": "Correct. Logical clocks are incremented before the event and the message carry this incremented time."
      },
      "correctAnswer": "d",
      "difficulty": "beginner"
    }
  ]
}
